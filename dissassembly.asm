!void divisionEntera(unsigned int dividendo1, unsigned int divisor1, unsigned int* resultado[]) {
!	unsigned int denominador = divisor1;
0x33F: BCF STATUS, 0x5
0x340: MOVF 0x23, W
0x341: MOVWF 0x32
0x342: MOVF divisor1, W
0x343: MOVWF denominador
!	unsigned int temp = 1;
0x344: MOVLW 0x1
0x345: MOVWF temp
0x346: MOVLW 0x0
0x347: MOVWF 0x30
!	unsigned int temp2 = 0x80000000;
0x348: CLRF temp2
0x349: CLRF 0x26
!	unsigned int resultadoParteEntera = 0;
0x34A: CLRF resultadoParteEntera
0x34B: CLRF 0x28
!	unsigned int resultadoFraccion = 0;
0x34C: CLRF resultadoFraccion
0x34D: CLRF 0x2A
!	unsigned int dividendo = dividendo1;
0x34E: MOVF 0x21, W
0x34F: MOVWF 0x34
0x350: MOVF __pcstackBANK0, W
0x351: MOVWF dividendo
!	unsigned int divisor = divisor1;
0x352: MOVF 0x23, W
0x353: MOVWF 0x2E
0x354: MOVF divisor1, W
0x355: MOVWF divisor
!	while (denominador <= dividendo) {
0x36C: GOTO 0x356
!		denominador <<= 1;
0x35E: MOVLW 0x1
0x35F: BCF STATUS, 0x0
0x360: RLF denominador, F
0x361: RLF 0x32, F
0x362: ADDLW 0xFF
0x363: BTFSS STATUS, 0x2
0x364: GOTO 0x35F
!		temp <<= 1;
0x365: MOVLW 0x1
0x366: BCF STATUS, 0x0
0x367: RLF temp, F
0x368: RLF 0x30, F
0x369: ADDLW 0xFF
0x36A: BTFSS STATUS, 0x2
0x36B: GOTO 0x366
!	}
0x356: MOVF 0x32, W
0x357: SUBWF 0x34, W
0x358: BTFSS STATUS, 0x2
0x359: GOTO 0x35C
0x35A: MOVF denominador, W
0x35B: SUBWF dividendo, W
0x35C: BTFSS STATUS, 0x0
0x35D: GOTO 0x36D
!	denominador >>= 1;
0x36D: MOVLW 0x1
0x36E: BCF STATUS, 0x0
0x36F: RRF 0x32, F
0x370: RRF denominador, F
0x371: ADDLW 0xFF
0x372: BTFSS STATUS, 0x2
0x373: GOTO 0x36E
!	temp >>= 1;
0x374: MOVLW 0x1
0x375: BCF STATUS, 0x0
0x376: RRF 0x30, F
0x377: RRF temp, F
0x378: ADDLW 0xFF
0x379: BTFSS STATUS, 0x2
0x37A: GOTO 0x375
!	while (temp != 0) {
0x37B: MOVF temp, W
0x37C: IORWF 0x30, W
0x37D: BTFSC STATUS, 0x2
0x37E: GOTO 0x3A0
0x39F: GOTO 0x37B
!		if (dividendo >= denominador) {
0x37F: MOVF 0x32, W
0x380: SUBWF 0x34, W
0x381: BTFSS STATUS, 0x2
0x382: GOTO 0x385
0x383: MOVF denominador, W
0x384: SUBWF dividendo, W
0x385: BTFSS STATUS, 0x0
0x386: GOTO 0x391
!			dividendo -= denominador;
0x387: MOVF denominador, W
0x388: SUBWF dividendo, F
0x389: MOVF 0x32, W
0x38A: BTFSS STATUS, 0x0
0x38B: DECF 0x34, F
0x38C: SUBWF 0x34, F
!			resultadoParteEntera |= temp;
0x38D: MOVF temp, W
0x38E: IORWF resultadoParteEntera, F
0x38F: MOVF 0x30, W
0x390: IORWF 0x28, F
!		}
!		temp >>= 1;
0x391: MOVLW 0x1
0x392: BCF STATUS, 0x0
0x393: RRF 0x30, F
0x394: RRF temp, F
0x395: ADDLW 0xFF
0x396: BTFSS STATUS, 0x2
0x397: GOTO 0x392
!		denominador >>= 1;
0x398: MOVLW 0x1
0x399: BCF STATUS, 0x0
0x39A: RRF 0x32, F
0x39B: RRF denominador, F
0x39C: ADDLW 0xFF
0x39D: BTFSS STATUS, 0x2
0x39E: GOTO 0x399
!	}
!	if (dividendo > 0) {
0x3A0: MOVF dividendo, W
0x3A1: IORWF 0x34, W
0x3A2: BTFSC STATUS, 0x2
0x3A3: GOTO 0x3E6
!		dividendo <<= 1;
0x3A4: MOVLW 0x1
0x3A5: BCF STATUS, 0x0
0x3A6: RLF dividendo, F
0x3A7: RLF 0x34, F
0x3A8: ADDLW 0xFF
0x3A9: BTFSS STATUS, 0x2
0x3AA: GOTO 0x3A5
!		int count = 23;
0x3AB: MOVLW 0x17
0x3AC: MOVWF count
0x3AD: MOVLW 0x0
0x3AE: MOVWF 0x2C
!		while (dividendo > 0 && count > 0) {
0x3AF: GOTO 0x3D7
0x3D7: MOVF dividendo, W
0x3D8: IORWF 0x34, W
0x3D9: BTFSC STATUS, 0x2
0x3DA: GOTO 0x3E6
0x3DB: MOVF 0x2C, W
0x3DC: XORLW 0x80
0x3DD: MOVWF 0x5F
0x3DE: MOVLW 0x80
0x3DF: SUBWF 0x5F, W
0x3E0: BTFSS STATUS, 0x2
0x3E1: GOTO 0x3E4
0x3E2: MOVLW 0x1
0x3E3: SUBWF count, W
0x3E4: BTFSC STATUS, 0x0
0x3E5: GOTO 0x3B0
!			if (dividendo >= divisor) {
0x3B0: BCF STATUS, 0x5
0x3B1: MOVF 0x2E, W
0x3B2: SUBWF 0x34, W
0x3B3: BTFSS STATUS, 0x2
0x3B4: GOTO 0x3B7
0x3B5: MOVF divisor, W
0x3B6: SUBWF dividendo, W
0x3B7: BTFSS STATUS, 0x0
0x3B8: GOTO 0x3C3
!				dividendo -= divisor;
0x3B9: MOVF divisor, W
0x3BA: SUBWF dividendo, F
0x3BB: MOVF 0x2E, W
0x3BC: BTFSS STATUS, 0x0
0x3BD: DECF 0x34, F
0x3BE: SUBWF 0x34, F
!				resultadoFraccion |= temp2;
0x3BF: MOVF temp2, W
0x3C0: IORWF resultadoFraccion, F
0x3C1: MOVF 0x26, W
0x3C2: IORWF 0x2A, F
!			}
!			temp2 >>= 1;
0x3C3: MOVLW 0x1
0x3C4: BCF STATUS, 0x0
0x3C5: RRF 0x26, F
0x3C6: RRF temp2, F
0x3C7: ADDLW 0xFF
0x3C8: BTFSS STATUS, 0x2
0x3C9: GOTO 0x3C4
!			dividendo <<= 1;
0x3CA: MOVLW 0x1
0x3CB: BCF STATUS, 0x0
0x3CC: RLF dividendo, F
0x3CD: RLF 0x34, F
0x3CE: ADDLW 0xFF
0x3CF: BTFSS STATUS, 0x2
0x3D0: GOTO 0x3CB
!			count--;
0x3D1: MOVLW 0xFF
0x3D2: ADDWF count, F
0x3D3: BTFSC STATUS, 0x0
0x3D4: INCF 0x2C, F
0x3D5: MOVLW 0xFF
0x3D6: ADDWF 0x2C, F
!		}
!	}
!	resultado[0] = resultadoParteEntera;
0x3E6: BCF STATUS, 0x5
0x3E7: MOVF resultado, W
0x3E8: MOVWF FSR
0x3E9: MOVF resultadoParteEntera, W
0x3EA: BCF STATUS, 0x7
0x3EB: MOVWF INDF
0x3EC: INCF FSR, F
0x3ED: MOVF 0x28, W
0x3EE: MOVWF INDF
!	resultado[1] = resultadoFraccion;
0x3EF: MOVF resultado, W
0x3F0: ADDLW 0x2
0x3F1: MOVWF FSR
0x3F2: MOVF resultadoFraccion, W
0x3F3: MOVWF INDF
0x3F4: INCF FSR, F
0x3F5: MOVF 0x2A, W
0x3F6: MOVWF INDF
!}
0x3F7: RETURN
