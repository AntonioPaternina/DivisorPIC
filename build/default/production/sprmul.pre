
# 1 "sprmul.c"

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.43\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 20 "fpform.h"
typedef union {
int32_t i;
double f;
struct {
unsigned char a, b, c, d;
} fAsBytes;
struct {
int16_t wordA, wordB;
} fAsWords;
} SFP;

typedef union {
int16_t i;
uint16_t n;
struct {
unsigned char a, b;
} nAsBytes;
} wordProduct;

# 77
extern double __fladd(double x, double y);
extern double __flsub(double x, double y);
extern double __flmul(double x, double y);
extern double __fldiv(double x, double y);
extern int spcmp(double x, double y);
extern double sqrt(double x);

extern unsigned int _Umul8_16(unsigned char multiplier, unsigned char multiplicand);

# 7 "sprmul.c"
double
__flmul(double b, double a) {
unsigned char sign;
unsigned char bexp;
unsigned char aexp;
uint32_t grs;
SFP prod;
wordProduct temp;


sign = (*(SFP *) & b).fAsBytes.d & 0x80;
bexp = ((*(SFP *) & b).fAsBytes.d) << 1;
if ((*(SFP *) & b).fAsBytes.c & 0x80) {
bexp |= 0x1;
}


if (bexp) {

if (bexp == 0xFF) {

b = 0;
}

(*(SFP *) & b).i |= (int32_t) 1 << 23;

}
else {

b = 0;
}

sign ^= (*(SFP *) & a).fAsBytes.d & 0x80;
aexp = ((*(SFP *) & a).fAsBytes.d) << 1;
if ((*(SFP *) & a).fAsBytes.c & 0x80) {
aexp |= 0x1;
}

if (aexp) {


if (aexp == 0xFF) {

a = 0;
}

(*(SFP *) & a).i |= (int32_t) 1 << 23;
}
else {

a = 0;
}

# 65
if (aexp == 0 || bexp == 0) {
return 0.0;
}

# 119
temp.n = _Umul8_16((*(((unsigned char *)(&a))+2)), (*(unsigned char *)(&b)));
grs = temp.nAsBytes.a;
prod.i = temp.nAsBytes.b;
temp.n = _Umul8_16((*(((unsigned char *)(&a))+1)), (*(((unsigned char *)(&b))+1)));
grs += temp.nAsBytes.a;
prod.i += temp.nAsBytes.b;
temp.n = _Umul8_16((*(unsigned char *)(&a)), (*(((unsigned char *)(&b))+2)));
grs += temp.nAsBytes.a;
prod.i += temp.nAsBytes.b;
grs <<= 8;
temp.n = _Umul8_16((*(unsigned char *)(&a)), (*(((unsigned char *)(&b))+1)));
grs += (unsigned long)temp.n;
temp.n = _Umul8_16((*(((unsigned char *)(&a))+1)), (*(unsigned char *)(&b)));
grs += (unsigned long)temp.n;
grs <<= 8;
temp.n = _Umul8_16((*(unsigned char *)(&a)), (*(unsigned char *)(&b)));
grs += (unsigned long)temp.n;
temp.n = _Umul8_16((*(((unsigned char *)(&a))+2)), (*(((unsigned char *)(&b))+1)));
prod.i += (unsigned long)temp.n;
temp.n = _Umul8_16((*(((unsigned char *)(&a))+1)), (*(((unsigned char *)(&b))+2)));
prod.i += (unsigned long)temp.n;
temp.n = _Umul8_16((*(((unsigned char *)(&a))+2)), (*(((unsigned char *)(&b))+2)));
prod.i += (((unsigned long)temp.n) << 8);



prod.i += (grs >> 24);
grs <<= 8;


temp.i = bexp + aexp - 126;


while (!(prod.i & ((int32_t) 1 << 23))) {
prod.i <<= 1;
if (grs & 0x80000000) {
prod.i |= 0x1;
}
grs <<= 1;
--temp.i;
}



aexp = 0;
if (grs & 0x80000000) {
if (grs & 0x7FFFFFFF) {
aexp = 1;
}
else {
if (prod.i & 1) {
aexp = 1;
}
}
}
if (aexp) {
++prod.i;
if (prod.i & ((int32_t) 1 << (23 + 1))) {
prod.i = prod.i >> 1;
++temp.i;
}
}


if (!(temp.i < (((int16_t)1 << 8) - 1))) {
prod.i = 0x7F800000;
}

else if (!(0 < temp.i)) {
prod.i = 0;

sign=0;
}
else {

bexp = temp.i;
prod.i &= (((int32_t)1 << 23) - 1);
if (bexp & 0x1) {
prod.fAsBytes.c |= 0x80;
}
prod.fAsBytes.d = bexp >> 1;
}
prod.fAsBytes.d |= sign;

return prod.f;

}

